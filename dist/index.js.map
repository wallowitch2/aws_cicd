{"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;0CAAM;AAEN,iBAAiB,CAAC,YAAc;IAC9B,MAAM,OAAO,UAAU,MAAM,CAAC,SAAS;QACrC,IAAI;YACF,MAAM,oCAAU,OAAO;YACvB,YAAY,IAAI;YAChB,eAAe,IAAI;QACrB;QACA,UAAU;YACR,MAAM,oCAAU,MAAM;YACtB,WAAW,KAAK;QAClB;QACA,UAAU;YACR,MAAM,oCAAU,MAAM;YACtB,WAAW,KAAK;QAClB;QAAM,OAAO;YACX,MAAM,oCAAU,MAAM;YACtB,WAAW,KAAK;QACpB;QACE,aAAa;YACT,MAAM,oCAAU,MAAM;YACtB,WAAW,KAAK;QACpB;QACA,KAAK;YACD,MAAM,oCAAU,MAAM;YACtB,WAAW,KAAK;QACpB;QACA,SAAS;YACL,MAAM,oCAAU,MAAM;YACtB,WAAW,KAAK;QACpB;IAGJ,GAAG;QACD,YAAY,KAAK,CAAC,2BAA2B;IAC/C;IACE,OAAO;AACT;;;;;ACtCA;0CAAM;AAEN,iBAAiB,CAAC,YAAc;IAC9B,MAAM,UAAU,UAAU,MAAM,CAAC,YAAY;QAC3C,IAAI;YACF,MAAM,oCAAU,OAAO;YACvB,YAAY,IAAI;YAChB,eAAe,IAAI;QACrB;QACA,MAAM;YACJ,MAAM,oCAAU,MAAM;YACtB,WAAW,KAAK;QAClB;QACA,aAAa;YACX,MAAM,oCAAU,IAAI;YACpB,WAAW,IAAI;QACjB;QACA,OAAO;YACL,MAAM,oCAAU,KAAK;YACrB,WAAW,KAAK;QAClB;QACA,WAAW;YACT,MAAM,oCAAU,MAAM;YACtB,WAAW,IAAI;QACjB;IACJ,GAAG;QACD,YAAY,IAAI,CAAC,2BAA2B;IAC9C;IACE,OAAO;AACT;;;;;AC7BA;0CAAM;AAEN,iBAAiB,CAAC,YAAc;IAC9B,MAAM,QAAQ,UAAU,MAAM,CAAC,UAAU;QACvC,IAAI;YACF,MAAM,oCAAU,OAAO;YACvB,YAAY,IAAI;YAChB,eAAe,IAAI;QACrB;QACA,SAAS;YACP,MAAM,oCAAU,OAAO;YACvB,WAAW,KAAK;QAClB;QACA,YAAY;YACV,MAAM,oCAAU,OAAO;YACvB,WAAW,KAAK;QAClB;QACA,UAAU;YACR,MAAM,oCAAU,OAAO;YACvB,WAAW,KAAK;QAClB;QACA,OAAO;YACL,MAAM,oCAAU,MAAM;YACtB,WAAW,KAAK;QAClB;QACA,YAAY;YACV,MAAM,oCAAU,IAAI;YACpB,cAAc,oCAAU,GAAG;QAC7B;IACJ,GAAG;QACD,YAAY,IAAI,CAAC,2BAA2B;IAC9C;IAEE,OAAO;AACT;;;;;AClCA;0CAAM;AAEN,iBAAiB,CAAC,YAAc;IAC9B,MAAM,WAAW,UAAU,MAAM,CAAC,YAAY;QAC5C,IAAI;YACF,MAAM,oCAAU,OAAO;YACvB,YAAY,IAAI;YAChB,eAAe,IAAI;QACrB;QACA,QAAQ;YACN,MAAM,oCAAU,MAAM;YACtB,WAAW,KAAK;QAClB;QACA,MAAM;YACJ,MAAM,oCAAU,MAAM;QACxB;QACA,UAAU;YACR,MAAM,oCAAU,OAAO;YACvB,WAAW,KAAK;QAClB;QACA,kBAAkB;YAChB,MAAM,oCAAU,MAAM;YACtB,WAAW,KAAK;QAClB;QACA,eAAe;YACb,MAAM,oCAAU,IAAI;YACpB,cAAc,oCAAU,GAAG;QAC5B;QACD,aAAa;YACX,MAAM,oCAAU,OAAO;YACvB,WAAW,KAAK;QAClB;IACJ,GAAG;QACD,YAAY,KAAK,CAAC,2BAA2B;IAC/C;IAEE,OAAO;AACT;;;;ACrCA;;;;;;AAIA,MAAM,kCAAY,wBAA8B;;;ACJhD;;ACAA,4BAAiB,KAAK,KAAK,CAAC;;;ADG5B,MAAM,kCAAY,IAAI,iBAAU,oCAAiB,oCAAiB,oCAAiB;IACjF,MAAM;IACN,SAAS;IACT,SAAS,KAAK;IACd,MAAM;QACJ,KAAK;QACL,KAAK;QACL,MAAM;IACR;AACF;AAEA,MAAM,2BAAK,CAAC;AAEZ,yBAAG,SAAS,GAAG;AACf,yBAAG,SAAS,GAAG;;AAEf,0BAA0B;AAC1B,yBAAG,IAAI,GAAG,yBAAqB,iCAAW;;AAC1C,yBAAG,OAAO,GAAG,yBAAwB,iCAAW;;AAChD,yBAAG,KAAK,GAAG,yBAAsB,iCAAW;;AAC5C,yBAAG,QAAQ,GAAG,yBAAyB,iCAAW;AAElD,4BAAiB;;;;AEzBjB;AACA,MAAM,+BAAS;;qCACT;AAEN,6BAAO,GAAG,CAAC,UAAU,CAAC,KAAK,MAAQ;IACjC,oBAAoB;IACpB,IAAI,MAAM,CAAC;AACb;AAEA,6BAAO,IAAI,CAAC,UAAU,OAAO,KAAK,MAAQ;IACxC,oBAAoB;IACpB,MAAM,YAAE,SAAQ,YAAE,SAAQ,EAAE,GAAG,IAAI,IAAI;IAEvC,IAAI;QACF,MAAM,OAAO,MAAM,+BAAK,OAAO,CAAC;YAAE,OAAO;0BAAE;0BAAU;YAAS;YAAG,YAAY;gBAAC;gBAAM;gBAAY;gBAAc;aAAQ;QAAE;QACxH,QAAQ,GAAG,CAAC,KAAK,QAAQ;QACzB,IAAI,MAAM;YACR,IAAI,OAAO,CAAC,UAAU,GAAG,IAAI;YAC7B,IAAI,OAAO,CAAC,OAAO,GAAG,KAAK,EAAE;YAC7B,IAAI,OAAO,CAAC,QAAQ,GAAG,KAAK,QAAQ;YACpC,IAAI,OAAO,CAAC,WAAW,GAAG,KAAK,WAAW;YAC1C,IAAI,OAAO,CAAC,KAAK,GAAG,KAAK,KAAK;YAC9B,QAAQ,GAAG,CAAC,IAAI,OAAO,CAAC,QAAQ;YAChC,QAAQ,GAAG,CAAC,wBAAwB,IAAI,OAAO,GAAG,SAAS;YAC3D,IAAI,QAAQ,CAAC;QACf,OAAO;YACL,QAAQ,GAAG,CAAC;YACZ,IAAI,QAAQ,CAAC;QACf,CAAC;IACH,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC;QACd,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;IACvB;AACF;AAEA,6BAAO,GAAG,CAAC,WAAW,CAAC,KAAK,MAAQ;IAClC,qBAAqB;IACrB,IAAI,OAAO,CAAC,OAAO;IACnB,IAAI,QAAQ,CAAC;AACf;AAEA,+BAA+B;AAC/B,6BAAO,GAAG,CAAC,aAAa,CAAC,KAAK,MAAQ;IACpC,IAAI,MAAM,CAAC;AACb;AAEA,2BAA2B;AAC3B,6BAAO,IAAI,CAAC,aAAa,OAAO,KAAK,MAAQ;IAC3C,MAAM,YAAE,SAAQ,YAAE,SAAQ,SAAE,MAAK,eAAE,YAAW,OAAE,IAAG,WAAE,QAAO,EAAC,GAAG,IAAI,IAAI;IAExE,IAAI;QACF,mCAAmC;QACnC,MAAM,eAAe,MAAM,+BAAK,OAAO,CAAC;YAAE,OAAO;0BAAE;YAAS;QAAE;QAC9D,IAAI,cACF,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;aAChB;YACL,oBAAoB;YACpB,MAAM,UAAU,MAAM,+BAAK,MAAM,CAAC;0BAChC;0BACA;uBACA;6BACA;qBACA;yBACA;YACF;YAEA,2DAA2D;YAC3D,IAAI,QAAQ,CAAC;QACf,CAAC;IACH,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC;QACd,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;IACvB;AACF;AAWA,4BAAiB;;;;ACpFjB;AACA,MAAM,+BAAS;;;wCAET;AAEN,MAAM,gCAAU,cAAO,WAAW,CAAC;IACjC,aAAa,CAAC,KAAK,MAAM,KAAO;QAC9B,GAAG,IAAI,EAAE;IACX;IACA,UAAU,CAAC,KAAK,MAAM,KAAO;QAC3B,GAAG,IAAI,EAAE,CAAC,EAAE,KAAK,GAAG,GAAG,CAAC,EAAE,KAAK,YAAY,CAAC,CAAC;IAC/C;AACF;AAEA,MAAM,+BAAS,cAAO;aAAE;AAAQ;AAEhC,6BAAO,GAAG,CAAC,KAAK,OAAO,KAAK,MAAQ;IAClC,IAAI;QACF,MAAM,WAAW,MAAM,kCAAQ,OAAO,CAAC;YAAC,OAAO;yBAAE;YAAO;QAAC;QACzD,IAAI,MAAM,CAAC,YAAY;sBAAE;QAAS;IACpC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC;QACd,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;IACvB;AACF;AAEA,6BAAO,IAAI,CAAC,KAAK,6BAAO,MAAM,CAAC,cAAc,OAAO,KAAK,MAAQ;IAC/D,IAAI;QACF,MAAM,QAAE,KAAI,eAAE,YAAW,SAAE,MAAK,EAAE,GAAG,IAAI,IAAI;QAC7C,MAAM,YAAY,IAAI,IAAI,CAAC,QAAQ;QACnC,MAAM,kCAAQ,MAAM,CAAC;kBAAE;yBAAM;mBAAa;uBAAO;QAAU;QAC3D,IAAI,QAAQ,CAAC;IACf,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC;QACd,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;IACvB;AACF;AAEA,6BAAO,GAAG,CAAC,QAAQ,OAAO,KAAK,MAAQ;IACrC,IAAI;QACF,MAAM,MAAE,GAAE,EAAE,GAAG,IAAI,MAAM;QACzB,MAAM,QAAE,KAAI,SAAE,MAAK,EAAE,GAAG,IAAI,IAAI;QAChC,MAAM,kCAAQ,MAAM,CAAC;kBAAE;mBAAM;QAAM,GAAG;YAAE,OAAO;oBAAE;YAAG;QAAE;QACtD,IAAI,QAAQ,CAAC;IACf,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC;QACd,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;IACvB;AACF;AAEA,6BAAO,MAAM,CAAC,QAAQ,OAAO,KAAK,MAAQ;IACxC,IAAI;QACF,MAAM,MAAE,GAAE,EAAE,GAAG,IAAI,MAAM;QACzB,MAAM,kCAAQ,OAAO,CAAC;YAAE,OAAO;oBAAE;YAAG;QAAE;QACtC,IAAI,QAAQ,CAAC;IACf,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC;QACd,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;IACvB;AACF;AAEA,6BAAO,GAAG,CAAC,QAAQ,CAAC,KAAK,MAAQ;IAC/B,IAAI,MAAM,CAAC;AACb;AAEA,4BAAiB;;;;ACjEjB;AACA,MAAM,+BAAS;;sCACT;AAEN,6BAAO,GAAG,CAAC,KAAK,OAAO,KAAK,MAAQ;IAClC,IAAI,IAAI,OAAO,CAAC,OAAO,EACrB,IAAI;QACF,MAAM,UAAU,IAAI,OAAO,CAAC,OAAO;QACnC,IAAI,SAAS,IAAI;QACjB,IAAI,IAAI,OAAO,CAAC,WAAW,KAAK,YAAW;YACzC,MAAM,QAAQ;YACd,SAAS,MAAM,gCAAM,OAAO,CAAC;gBAAC,OAAO;2BAAE;gBAAK;YAAC;QAC/C,OACE,SAAS,MAAM,gCAAM,OAAO,CAAC;YAAC,OAAO;yBAAE;YAAO;QAAC;QAGjD,IAAI,MAAM,CAAC,UAAU;oBAAE;YAAO,MAAM,IAAI,OAAO,CAAC,QAAQ;YAAE,aAAa,IAAI,OAAO,CAAC,WAAW;YAAE,SAAU,IAAI,OAAO,CAAC,OAAO;QAAC;IAChI,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC;QACd,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;IACvB;AAEJ;AAGA,6BAAO,IAAI,CAAC,KAAK,OAAO,KAAK,MAAQ;IACnC,IAAI;QACF,MAAM,WAAE,QAAO,cAAE,WAAU,YAAE,SAAQ,EAAE,GAAG,IAAI,IAAI;QAClD,MAAM,gCAAM,MAAM,CAAC;qBAAE;wBAAS;sBAAY;QAAS;QACnD,IAAI,QAAQ,CAAC;IACf,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC;QACd,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;IACvB;AACF;AAEA,6BAAO,GAAG,CAAC,QAAQ,OAAO,KAAK,MAAQ;IACrC,IAAI;QACF,MAAM,MAAE,GAAE,EAAE,GAAG,IAAI,MAAM;QACzB,MAAM,WAAE,QAAO,cAAE,WAAU,YAAE,SAAQ,EAAE,GAAG,IAAI,IAAI;QAClD,MAAM,gCAAM,MAAM,CAAC;qBAAE;wBAAS;sBAAY;QAAS,GAAG;YAAE,OAAO;oBAAE;YAAG;QAAE;QACtE,IAAI,QAAQ,CAAC;IACf,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC;QACd,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;IACvB;AACF;AAGA,6BAAO,MAAM,CAAC,QAAQ,OAAO,KAAK,MAAQ;IACtC,IAAI;QACF,MAAM,MAAE,GAAE,EAAE,GAAG,IAAI,MAAM;QACzB,MAAM,gCAAM,OAAO,CAAC;YAAE,OAAO;oBAAE;YAAG;QAAE;QACpC,IAAI,QAAQ,CAAC;IACf,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC;QACd,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;IACvB;AACJ;AAEA,4BAAiB;;;;AC5DjB;AACA,MAAM,+BAAS;;yCAET;;sCACA;;qCACA;AAGN,6BAAO,GAAG,CAAC,KAAK,OAAO,KAAK,MAAQ;IAClC,IAAI;QACF,cAAc,IAAI,OAAO,CAAC,OAAO;QACjC,MAAM,aAAa,MAAM,mCAAS,OAAO,CAAC;YAAC,OAAQ;6BAAC;YAAW;QAAC;QAChE,IAAI,MAAM,CAAC,cAAc;wBAAE;QAAW;IACxC,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC;QACd,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;IACvB;AACF;AAEA,6BAAO,IAAI,CAAC,KAAK,OAAO,KAAK,MAAQ;IACnC,IAAI;QACF,MAAM,YAAE,SAAQ,EAAE,GAAG,IAAI,IAAI;QAC7B,MAAM,SAAS;QAGf,MAAM,QAAQ,MAAM,gCAAM,OAAO,CAAC;YAAC,OAAQ;gBAAC,IAAG;YAAQ;QAAC;QACxD,IAAG,OAAM;YACP,MAAM,UAAU,MAAM,OAAO;YAC7B,QAAQ,GAAG,CAAC;YACZ,YAAY,MAAM,+BAAK,OAAO,CAAC;gBAAC,OAAO;oBAAC,IAAG;gBAAQ;gBAAE,YAAY;oBAAC;oBAAW;iBAAM;YAAA;YAEnF,MAAM,mBAAmB,UAAU,UAAU,CAAC,OAAO;YACrD,MAAM,eAAe,UAAU,UAAU,CAAC,GAAG;YAC7C,MAAM,eAAc,IAAI,OAAO,CAAC,OAAO;YACvC,QAAQ,GAAG,CAAC;YACZ,MAAM,OAAO;YAEb,MAAM,mCAAS,MAAM,CAAC;wBAAE;sBAAQ;0BAAM;kCAAU;8BAAkB;gBAAc,aAAA;YAAW;YAC3F,MAAM,gCAAM,MAAM,CAAC;gBAAE,OAAO;YAAO,GAAG;gBAAE,OAAO;oBAAE,IAAI;gBAAS;YAAE;QAClE,CAAC;QACD,IAAI,QAAQ,CAAC;IACf,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC;QACd,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;IACvB;AACF;AAEA,6BAAO,GAAG,CAAC,QAAQ,OAAO,KAAK,MAAQ;IACrC,IAAI;QACF,MAAM,MAAE,GAAE,EAAE,GAAG,IAAI,MAAM;QACzB,MAAM,UAAE,OAAM,YAAE,SAAQ,oBAAE,iBAAgB,EAAE,GAAG,IAAI,IAAI;QAEvD,QAAQ,GAAG,CAAC,IAAI,IAAI;QACpB,QAAQ,GAAG,CAAC,IAAI,IAAI,CAAC,QAAQ;QAC3B,8DAA8D;QAC9D,IAAI,WAAW,WAAW,WAAU,MAAM;YACxC,MAAM,gCAAM,MAAM,CAAC;gBAAE,OAAO;YAAO,GAAG;gBAAE,OAAO;oBAAE,IAAI;gBAAS;YAAE;YAEhE,MAAM,mCAAS,MAAM,CAAC;gBAAE,QAAQ;YAAO,GAAG;gBAAE,OAAO;oBAAE,IAAI;gBAAG;YAAE;QAChE,CAAC;QAIH,IAAI,QAAQ,CAAC;IACf,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC;QACd,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;IACvB;AACF;AAEA,6BAAO,MAAM,CAAC,QAAQ,OAAO,KAAK,MAAQ;IACxC,IAAI;QACF,MAAM,MAAE,GAAE,EAAE,GAAG,IAAI,MAAM;QACzB,MAAM,mCAAS,OAAO,CAAC;YAAE,OAAO;oBAAE;YAAG;QAAE;QACvC,IAAI,QAAQ,CAAC;IACf,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC;QACd,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;IACvB;AACF;AAEA,4BAAiB;;;;wCNpEX;AAEN,MAAM,4BAAM;AACZ,MAAM,6BAAO;AAEb,oCAAa,IAAI,GACd,IAAI,CAAC,IAAM;IACV,QAAQ,GAAG,CAAC;AACd,GACC,KAAK,CAAC,CAAC,QAAU;IAChB,QAAQ,KAAK,CAAC,2BAA2B;AAC3C;AAEF,0BAAI,GAAG,CAAC,sBAAQ;IACd,QAAQ;IACR,QAAQ,KAAK;IACb,mBAAmB,IAAI;IACvB,QAAQ;QAAE,QAAQ,KAAK;IAAC;AAE1B;AAEA,0BAAI,GAAG,CAAC,sBAAe,aAAe,iEAAiE;AAEvG,0BAAI,GAAG,CAAC,SAAS,iBAAU,iCAAW;AACtC,0BAAI,GAAG,CAAC,eAAe;AAEvB,0BAAI,GAAG,CAAC,eAAQ,MAAM,CAAC;AACvB,0BAAI,GAAG,CAAC,6BAAsB;IAAE,UAAU,KAAK;AAAC;AAEhD,0BAAI,GAAG,CAAC,SAAS;AACjB,0BAAI,GAAG,CAAC,aAAa;AACrB,0BAAI,GAAG,CAAC,WAAW;AACnB,0BAAI,GAAG,CAAC,eAAe;AAEvB,0BAAI,GAAG,CAAC,CAAC,KAAK,KAAK,OAAS;IAC1B,IAAI,IAAI,OAAO,CAAC,QAAQ,IAAI,IAAI,IAAI,KAAK,eACvC;SAEA,IAAI,QAAQ,CAAC;AAEjB;AAEA,0BAAI,GAAG,CAAC,KAAK,CAAC,KAAK,MAAQ;IACzB,IAAI,IAAI,OAAO,CAAC,QAAQ,EAAE;QACxB,QAAQ,GAAG,CAAC,4BAA4B,IAAI,OAAO;QACnD,IAAI,QAAQ,CAAC;IACf,OACE,IAAI,QAAQ,CAAC;AAEjB;AAEA,0BAAI,GAAG,CAAC,UAAU,OAAO,KAAK,MAAQ;IACpC,IAAI,IAAI,OAAO,CAAC,QAAQ,EACtB,IAAI;QACF,MAAM,WAAW,MAAM,kCAAQ,OAAO;QACtC,QAAQ,GAAG,CAAC,4BAA4B,IAAI,OAAO;QACnD,IAAI,MAAM,CAAC,SAAS;YAAE,MAAM,IAAI,OAAO,CAAC,QAAQ;YAAE,aAAa,IAAI,OAAO,CAAC,WAAW;sBAAE;YAAU,SAAU,IAAI,OAAO,CAAC,OAAO;QAAA;IACjI,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC;QACd,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;IACvB;SAEA,IAAI,QAAQ,CAAC;AAEjB;AAGA,iBAAiB,WAAW;IAC1B,OAAO,IAAI,QAAQ,CAAC,SAAS,SAAW;QACtC,MAAM,SAAS,0BAAI,MAAM,CAAC,4BAAM,IAAM;YACpC,QAAQ,GAAG,CAAC,CAAC,mCAAmC,EAAE,2BAAK,CAAC;YACxD,QAAQ;QACV;IACF;AACF,GACA;;;;AAIA","sources":["models/User.js","models/Product.js","models/Order.js","models/Delivery.js","index.js","models/index.js","config/config.json","routes/auth.js","routes/product.js","routes/orders.js","routes/deliveries.js"],"sourcesContent":["const { DataTypes } = require('sequelize');\r\n\r\nmodule.exports = (sequelize) => {\r\n  const User = sequelize.define('users', {\r\n    id: {\r\n      type: DataTypes.INTEGER,\r\n      primaryKey: true,\r\n      autoIncrement: true,\r\n    },\r\n    username: {\r\n      type: DataTypes.STRING,\r\n      allowNull: false\r\n    },\r\n    password: {\r\n      type: DataTypes.STRING,\r\n      allowNull: false,\r\n    },    email: {\r\n      type: DataTypes.STRING,\r\n      allowNull: false,\r\n  },\r\n    accounttype: {\r\n        type: DataTypes.STRING,\r\n        allowNull: false,\r\n    },\r\n    tel: {\r\n        type: DataTypes.STRING,\r\n        allowNull: false,\r\n    },\r\n    address: {\r\n        type: DataTypes.STRING,\r\n        allowNull: false,\r\n    }\r\n\r\n\r\n}, {\r\n  timestamps: false // timestamps 옵션을 false로 설정\r\n});\r\n  return User;\r\n};\r\n","const { DataTypes } = require('sequelize');\r\n\r\nmodule.exports = (sequelize) => {\r\n  const Product = sequelize.define('Products', {\r\n    id: {\r\n      type: DataTypes.INTEGER,\r\n      primaryKey: true,\r\n      autoIncrement: true,\r\n    },\r\n    name: {\r\n      type: DataTypes.STRING,\r\n      allowNull: false,\r\n    },\r\n    description: {\r\n      type: DataTypes.TEXT,\r\n      allowNull: true,\r\n    },\r\n    price: {\r\n      type: DataTypes.FLOAT,\r\n      allowNull: false,\r\n    },\r\n    image_url: {\r\n      type: DataTypes.STRING,\r\n      allowNull: true,\r\n    }\r\n}, {\r\n  timestamps: true // timestamps 옵션을 false로 설정\r\n});\r\n  return Product;\r\n};\r\n","const { DataTypes } = require('sequelize');\r\n\r\nmodule.exports = (sequelize) => {\r\n  const Order = sequelize.define('Orders', {\r\n    id: {\r\n      type: DataTypes.INTEGER,\r\n      primaryKey: true,\r\n      autoIncrement: true,\r\n    },\r\n    user_id: {\r\n      type: DataTypes.INTEGER,\r\n      allowNull: false,\r\n    },\r\n    product_id: {\r\n      type: DataTypes.INTEGER,\r\n      allowNull: false,\r\n    },\r\n    quantity: {\r\n      type: DataTypes.INTEGER,\r\n      allowNull: false,\r\n    },\r\n    state: {\r\n      type: DataTypes.STRING,\r\n      allowNull: false,\r\n    },\r\n    order_date: {\r\n      type: DataTypes.DATE,\r\n      defaultValue: DataTypes.NOW,\r\n    }\r\n}, {\r\n  timestamps: true // timestamps 옵션을 false로 설정\r\n});\r\n\r\n  return Order;\r\n};\r\n","const { DataTypes } = require('sequelize');\r\n\r\nmodule.exports = (sequelize) => {\r\n  const Delivery = sequelize.define('Delivery', {\r\n    id: {\r\n      type: DataTypes.INTEGER,\r\n      primaryKey: true,\r\n      autoIncrement: true,\r\n    },\r\n    status: {\r\n      type: DataTypes.STRING,\r\n      allowNull: false,\r\n    },\r\n    memo: {\r\n      type: DataTypes.STRING,\r\n    },\r\n    order_id: {\r\n      type: DataTypes.INTEGER,\r\n      allowNull: false,\r\n    },\r\n    delivery_address: {\r\n      type: DataTypes.STRING,\r\n      allowNull: false,\r\n    },\r\n    delivery_date: {\r\n      type: DataTypes.DATE,\r\n      defaultValue: DataTypes.NOW,\r\n     },\r\n    delivery_id: {\r\n      type: DataTypes.INTEGER,\r\n      allowNull: false,\r\n    }\r\n}, {\r\n  timestamps: false // timestamps 옵션을 false로 설정\r\n});\r\n\r\n  return Delivery;\r\n};\r\n","const express = require('express');\r\nconst path = require('path');\r\nconst bodyParser = require('body-parser');\r\nconst session = require('express-session');\r\nconst FileStore = require('session-file-store')(session);\r\nconst methodOverride = require('method-override');\r\n\r\nconst db = require('./models');\r\nconst authRouter = require('./routes/auth');\r\nconst productsRouter = require('./routes/product');\r\nconst ordersRouter = require('./routes/orders');\r\nconst deliveriesRouter = require('./routes/deliveries');\r\n\r\nconst { Product } = require('./models');\r\n\r\nconst app = express();\r\nconst port = 3000;\r\n\r\ndb.sequelize.sync()\r\n  .then(() => {\r\n    console.log('Database synced');\r\n  })\r\n  .catch((error) => {\r\n    console.error('Error syncing database:', error);\r\n  });\r\n\r\napp.use(session({\r\n  secret: 'keroro2424.', // 세션 암호화에 사용되는 비밀키\r\n  resave: false, // 변경이 없어도 세션을 항상 저장할지 여부\r\n  saveUninitialized: true, // 초기화되지 않은 세션을 저장할지 여부\r\n  cookie: { secure: false }, // 쿠키 설정 (https를 사용하는 경우 secure: true로 설정)\r\n\r\n}));\r\n  \r\napp.use(methodOverride('_method'));   // post 요청을 put으로 변경 필요시 사용 html form 에서 '_method'를 이용하여 put으로 변경\r\n\r\napp.set('views', path.join(__dirname, 'views'));\r\napp.set('view engine', 'ejs');\r\n\r\napp.use(express.static('public'));\r\napp.use(bodyParser.urlencoded({ extended: false }));\r\n\r\napp.use('/auth', authRouter);\r\napp.use('/products', productsRouter);\r\napp.use('/orders', ordersRouter);\r\napp.use('/deliveries', deliveriesRouter);\r\n\r\napp.use((req, res, next) => {\r\n  if (req.session.username || req.path === '/auth/login') {\r\n    next();\r\n  } else {\r\n    res.redirect('/auth/login');\r\n  }\r\n});\r\n\r\napp.get('/', (req, res) => {\r\n  if (req.session.username) {\r\n    console.log('Session in /index route:', req.session);\r\n    res.redirect('/index');\r\n  } else {\r\n    res.redirect('/auth/login');\r\n  }\r\n});\r\n\r\napp.get('/index', async (req, res) => {\r\n  if (req.session.username) {\r\n    try {\r\n      const products = await Product.findAll();\r\n      console.log('Session in /index route:', req.session);\r\n      res.render('index', { user: req.session.username, accounttype: req.session.accounttype, products, user_id : req.session.user_id});\r\n    } catch (error) {\r\n      console.error(error);\r\n      res.status(500).send('Internal server error');\r\n    }\r\n  } else {\r\n    res.redirect('/auth/login');\r\n  }\r\n});\r\n\r\n\r\nmodule.exports = function() {\r\n  return new Promise((resolve, reject) => {\r\n    const server = app.listen(port, () => {\r\n      console.log(`Server running at http://localhost:${port}`);\r\n      resolve(server);\r\n    });\r\n  });\r\n};\r\n/*\r\napp.listen(port, () => {\r\n  console.log(`Example app listening on port ${port}`);\r\n});\r\n*/\r\n","const Sequelize = require('sequelize');\r\nconst config = require('../config/config.json'); // 데이터베이스 설정 파일 위치에 맞게 경로를 수정해주세요\r\n\r\nconst sequelize = new Sequelize(config.database, config.username, config.password, {\r\n  host: config.host,\r\n  dialect: config.dialect,\r\n  logging: false,\r\n  pool: {\r\n    max: 5,\r\n    min: 0,\r\n    idle: 10000,\r\n  },\r\n});\r\n\r\nconst db = {};\r\n\r\ndb.Sequelize = Sequelize;\r\ndb.sequelize = sequelize;\r\n\r\n// 모델 파일들을 임포트하고 객체에 추가하세요\r\ndb.User = require('./User.js')(sequelize, Sequelize);\r\ndb.Product = require('./Product.js')(sequelize, Sequelize);\r\ndb.Order = require('./Order.js')(sequelize, Sequelize);\r\ndb.Delivery = require('./Delivery.js')(sequelize, Sequelize);\r\n\r\nmodule.exports = db;\r\n","{\r\n    \"username\": \"node\",\r\n    \"password\": \"\",\r\n    \"database\": \"shop\",\r\n    \"host\": \"192.168.219.31\",\r\n    \"dialect\": \"mysql\"\r\n  }\r\n  ","const express = require('express');\r\nconst router = express.Router();\r\nconst { User } = require('../models');\r\n\r\nrouter.get('/login', (req, res) => {\r\n  // Render login page\r\n  res.render('login');\r\n});\r\n\r\nrouter.post('/login', async (req, res) => {\r\n  // Handle user login\r\n  const { username, password } = req.body;\r\n\r\n  try {\r\n    const user = await User.findOne({ where: { username, password }, attributes: ['id', 'username', 'accounttype','email'], });\r\n    console.log(user.username);\r\n    if (user) {\r\n      req.session.is_logined = true;\r\n      req.session.user_id = user.id;\r\n      req.session.username = user.username;\r\n      req.session.accounttype = user.accounttype;\r\n      req.session.email = user.email;\r\n      console.log(req.session.username);\r\n      console.log('Session after login:', req.session); // 추가된 로그\r\n      res.redirect('/');\r\n    } else {\r\n      console.log(\"login failed\");\r\n      res.redirect('/auth/login');\r\n    }\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).send('Internal server error');\r\n  }\r\n});\r\n\r\nrouter.get('/logout', (req, res) => {\r\n  // Handle user logout\r\n  req.session.destroy();\r\n  res.redirect('/auth/login');\r\n});\r\n\r\n// Render the registration page\r\nrouter.get('/register', (req, res) => {\r\n  res.render('register');\r\n});\r\n\r\n// Handle user registration\r\nrouter.post('/register', async (req, res) => {\r\n  const { username, password, email, accounttype, tel, address} = req.body;\r\n\r\n  try {\r\n    // Check if the user already exists\r\n    const existingUser = await User.findOne({ where: { username } });\r\n    if (existingUser) {\r\n      res.status(409).send('User already exists');\r\n    } else {\r\n      // Create a new user\r\n      const newUser = await User.create({\r\n        username,\r\n        password,\r\n        email,\r\n        accounttype,\r\n        tel,\r\n        address\r\n      });\r\n\r\n      // Redirect to the login page after successful registration\r\n      res.redirect('/auth/login');\r\n    }\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).send('Internal server error');\r\n  }\r\n});\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nmodule.exports = router;\r\n","const express = require('express');\r\nconst router = express.Router();\r\nconst multer = require('multer');\r\nconst { Product } = require('../models');\r\n\r\nconst storage = multer.diskStorage({\r\n  destination: (req, file, cb) => {\r\n    cb(null, 'public/images');\r\n  },\r\n  filename: (req, file, cb) => {\r\n    cb(null, `${Date.now()}-${file.originalname}`);\r\n  },\r\n});\r\n\r\nconst upload = multer({ storage });\r\n\r\nrouter.get('/', async (req, res) => {\r\n  try {\r\n    const products = await Product.findAll({where: { user_id}});\r\n    res.render('products', { products });\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).send('Internal server error');\r\n  }\r\n});\r\n\r\nrouter.post('/', upload.single('image_url'), async (req, res) => {\r\n  try {\r\n    const { name, description, price } = req.body;\r\n    const image_url = req.file.filename;\r\n    await Product.create({ name, description, price, image_url });\r\n    res.redirect('/');\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).send('Internal server error');\r\n  }\r\n});\r\n\r\nrouter.put('/:id', async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const { name, price } = req.body;\r\n    await Product.update({ name, price }, { where: { id } });\r\n    res.redirect('/');\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).send('Internal server error');\r\n  }\r\n});\r\n\r\nrouter.delete('/:id', async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n    await Product.destroy({ where: { id } });\r\n    res.redirect('/');\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).send('Internal server error');\r\n  }\r\n});\r\n\r\nrouter.get('/add', (req, res) => {\r\n  res.render('add-product');\r\n});\r\n\r\nmodule.exports = router;\r\n","const express = require('express');\r\nconst router = express.Router();\r\nconst {Order} = require('../models');\r\n\r\nrouter.get('/', async (req, res) => {\r\n  if (req.session.user_id) {\r\n    try {\r\n      const user_id = req.session.user_id;\r\n      let orders = null\r\n      if (req.session.accounttype === 'delivery'){\r\n        const state = '준비중';\r\n        orders = await Order.findAll({where: { state}});\r\n      }else{\r\n        orders = await Order.findAll({where: { user_id}});\r\n      }\r\n\r\n      res.render('orders', { orders,user: req.session.username, accounttype: req.session.accounttype, user_id : req.session.user_id });\r\n    } catch (error) {\r\n      console.error(error);\r\n      res.status(500).send('Internal server error');\r\n    }\r\n  }\r\n});\r\n\r\n\r\nrouter.post('/', async (req, res) => {\r\n  try {\r\n    const { user_id, product_id, quantity } = req.body;\r\n    await Order.create({ user_id, product_id, quantity });\r\n    res.redirect('/orders');\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).send('Internal server error');\r\n  }\r\n});\r\n\r\nrouter.put('/:id', async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const { user_id, product_id, quantity } = req.body;\r\n    await Order.update({ user_id, product_id, quantity }, { where: { id } });\r\n    res.redirect('/orders');\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).send('Internal server error');\r\n  }\r\n});\r\n\r\n\r\nrouter.delete('/:id', async (req, res) => {\r\n    try {\r\n      const { id } = req.params;\r\n      await Order.destroy({ where: { id } });\r\n      res.redirect('/orders');\r\n    } catch (error) {\r\n      console.error(error);\r\n      res.status(500).send('Internal server error');\r\n    }\r\n});\r\n  \r\nmodule.exports = router;\r\n  ","const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst {Delivery} = require('../models');\r\nconst {Order} = require('../models');\r\nconst {User} = require('../models');\r\n\r\n\r\nrouter.get('/', async (req, res) => {\r\n  try {\r\n    delivery_id = req.session.user_id;\r\n    const deliveries = await Delivery.findAll({where : {delivery_id}});\r\n    res.render('deliveries', { deliveries });\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).send('Internal server error');\r\n  }\r\n});\r\n\r\nrouter.post('/', async (req, res) => {\r\n  try {\r\n    const { order_id } = req.body;\r\n    const status = \"배송 중\";\r\n\r\n    \r\n    const order = await Order.findOne({where : {id:order_id}});\r\n    if(order){\r\n      const user_id = order.user_id;\r\n      console.log(user_id);\r\n      user_info = await User.findOne({where: {id:user_id },attributes: ['address', 'tel']})\r\n      \r\n      const delivery_address = user_info.dataValues.address;\r\n      const delivery_tel = user_info.dataValues.tel;\r\n      const delivery_id = req.session.user_id;\r\n      console.log(delivery_id);\r\n      const memo = '';\r\n\r\n      await Delivery.create({ status, memo, order_id, delivery_address, delivery_tel, delivery_id});\r\n      await Order.update({ state: status }, { where: { id: order_id } });\r\n    }\r\n    res.redirect('/orders');\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).send('Internal server error');\r\n  }\r\n});\r\n\r\nrouter.put('/:id', async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const { status, order_id, delivery_address } = req.body;\r\n    \r\n    console.log(req.body);\r\n    console.log(req.body.order_id);\r\n      // If the status is '배송 완료', update the order state to '배송 완료'\r\n      if (status === '배송 완료' || status ==='보류') {\r\n        await Order.update({ state: status }, { where: { id: order_id } });\r\n\r\n        await Delivery.update({ status: status }, { where: { id: id } });\r\n      }\r\n\r\n\r\n\r\n    res.redirect('/deliveries');\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).send('Internal server error');\r\n  }\r\n});\r\n\r\nrouter.delete('/:id', async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n    await Delivery.destroy({ where: { id } });\r\n    res.redirect('/deliveries');\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).send('Internal server error');\r\n  }\r\n});\r\n\r\nmodule.exports = router;\r\n"],"names":[],"version":3,"file":"index.js.map"}